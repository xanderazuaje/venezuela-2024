---
interface Props {
  images: string[];
  altText: string;
}

const { images, altText } = Astro.props;
---

<div class='carousel relative w-full'>
  <div class='img-container relative h-96 overflow-hidden rounded-lg'>
    {
      images.map((e, index) => (
        <img
          src={e}
          alt={altText}
          class={`absolute block w-full transition-opacity duration-500 ${index === 0 ? 'opacity-100' : 'opacity-0'} `}
          style='top: 50%; left: 50%; transform: translate(-50%, -50%);'
          data-index={index}
        />
      ))
    }
    <button
      id='prevBtn'
      class='absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer'
      aria-label='Previous'
    >
      <span class='inline-flex items-center justify-center w-6 h-6 rounded-full bg-white hover:bg-white/50'>
        <svg
          class='w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180'
          aria-hidden='true'
          xmlns='http://www.w3.org/2000/svg'
          fill='none'
          viewBox='0 0 6 10'
        >
          <path stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 1 1 5l4 4'
          ></path>
        </svg>
        <span class='sr-only'>Previous</span>
      </span>
    </button>
    <button
      id='nextBtn'
      class='absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer'
      aria-label='Next'
    >
      <span class='inline-flex items-center justify-center w-6 h-6 rounded-full bg-white hover:bg-white/50'>
        <svg
          class='w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180'
          aria-hidden='true'
          xmlns='http://www.w3.org/2000/svg'
          fill='none'
          viewBox='0 0 6 10'
        >
          <path stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 9 4-4-4-4'
          ></path>
        </svg>
        <span class='sr-only'>Next</span>
      </span>
    </button>
  </div>
</div>

<script>
  const imgContainer = document.querySelectorAll('.img-container');
  let currentIndex = 0;

  imgContainer.forEach((container) => {
    const images = container.querySelectorAll('[data-index]');
    const prevBtn = container.querySelector('#prevBtn');
    const nextBtn = container.querySelector('#nextBtn');

    function updateCarousel(index: number) {
      images.forEach((img, i) => {
        img.classList.toggle('opacity-100', i === index);
        img.classList.toggle('opacity-0', i !== index);
      });
    }

    prevBtn?.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      updateCarousel(currentIndex);
    });

    nextBtn?.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % images.length;
      updateCarousel(currentIndex);
    });
  });
</script>
